    1、向所有列插入数据--into关键字可以省略

insert    into    表名  values（列值1，列值2，……）

insert    into  studentinfo  values（‘004’，‘张鑫’，19，‘北京海淀’）


    2、向指定列插入数据--into关键字可以省略
，不提供值的列一定是可以为空的列（null），
列名的顺序可以与表结构中的顺序不同，只要列值的顺序与之对应就行
 insert    studentinfo（姓名，学号）  values（‘王强’，‘006’）


insert  into  表名（列名1，列名2，……） values（列值1，列值2，……）

insert    into  studentinfo（学号，姓名）  values（‘005’，‘李清’
identity--相同：对于标识列，因为是自动增长的，所以不能指定值
default--系统设定值：具有缺省值的列，可以使用default关键字来替代插入的数据

    3、删除表中数据--from关键字可以省略，如果不指定where条件，将把表中所有记录都删除掉（很危险！），
如果使用where指定条件，则满足条件的记录被删除
不能只删除半行或某几列数据

delete-删除   from   Tab1

delete   book  where  bid='s0000'

truncate-删除所有   table 表名--不能指定条件，只能删除所有数据，所以功能等价于“delate  表名”的语句 
优点：速度更快，使用的系统资源和事务日志资源更少
 缺点：不会将删除每一条记录的操作记录到日志中，所以一旦删除，则无法通过日志恢复删除的数据
drop-删除    database-数据库 表名--删除数据库名

drop table-表 表名--删除表结构

    4、更新表中数据

update--更新 表名 set--日落 列名1=该列新值，列名2=该列新值，......where 条件
update 表名 set salary=salary+100--表述每行工资都加100
update book set pub='新华出版社'   where    Bname='娱乐天地‘--更新指定的记录
update book set author2='江泽民',numinput=100,numstore=100 where author1='邓小平'--同时更新多个字段

    5、查询表中的数据

select * from 表名--查询所有记录
select 列名1，列名2，…… from 表名--查询指定的列，列的顺序可以与表结构的顺序不同，列之间使用逗号分隔
select Cid, address, Cname, Phone  from  customer

select 列名1 as 列别名1，列名2 as 列别名2，…… from 表名--重新为列指定列名，as关键字可以省略
select Bname as 书名,Author1 as 作者,Pub as 出版社 from book

select cid 学号,cname 姓名, address ,phone as 电话 from customer

select 列别名1=列名1，列别名2=列名2 ，…… from 表名--使用等于号重新为列指定列名
select 书名=bname,书号=bid,pub from book

select 列名1 +列名1 as 列别名，…… from 表名--可以把多列合并成一列显示

select 列别名=列名1 +列名1 ,…… from 表名
select 列名1 ，列名2 ，常量值 as 列名 from 表名--使用常量
select * from 表名 order by age asc--升序，salary desc--降序
select * from 表名 where address like '深圳%'

在mysql数据库中要查询前10条数据，不再使用top n语句，top n语句主要用在sqlserver数据库系统中，
在mysql中一般使用 select * from 表名 limit 0,10 order by 字段 desc,
如在学生表中查询年龄比较大的前10个学生，则这样写，
select * from 学生表 limit 0,10 order by 年龄 desc。（一般使用这个 在后面加 limit 0,10）
select top 5 * from customer （这个在sqlserver数据库中使用，在cmd使用无效）
select * from table_name limit 0,10 (0代表从第几行开始，10代表显示多少行)

select * from book where numstore between 20 and 30 
select * from book where id in （'a0001','a0002'）
合函数方便进行数据统计
聚合函数不能在 where 中使用 
常用聚合函数 
count(): 查询总记录数 ：查询学生总数 select count(*) from students;
max(): 查询最大值 ：查询女生的最大年龄 select max(age) from students where sex='女'; 
min(): 查询最小值 ：查询1班的最小年龄 select min(age) from students;
sum(): 求和 ：查询北京学生的年龄总和 select sum(age) from students where hometown='北京';
avg(): 求平均值：查询女生的平均年龄 select avg(age) from students where sex='女' 

查询表结构：
	desc 表名;
		示例：
			desc student; 查询表student里面表的数据结构
显示表的类型：
	show full 表名;
		示例：
			show full sakila;
    
    use library
    create table 学生成绩表
    (
    学号 varchar(10) not null ,
    姓名 varchar(20) not null ,
    科目 varchar(20),
    成绩 char(2),
    )
    select * from 学生成绩表
    insert into 学生成绩表 values (20190701,'王子涵','语文','97')
    insert into 学生成绩表 values (20190702,'张兴兴','语文','95')
    insert into 学生成绩表 values (20190701,'王子涵','数学','92')
    insert into 学生成绩表 values (20190703,'张珊','语文','82')
    insert into 学生成绩表 values (20190703,'张珊','英语','90')
    insert into 学生成绩表 values (20190701,'王子涵','英语','95')
    insert into 学生成绩表 values (20190702,'张兴兴','英语','90')
    insert into 学生成绩表 values (20190702,'张兴兴','数学','92')
    insert into 学生成绩表 values (20190703,'张珊','数学','95')
    select a.学号,a.姓名,a.语文成绩,b.数学成绩,c.英语成绩 from
        (select 学号,姓名,成绩 语文成绩 from 学生成绩表 where 科目='语文') a
         inner join 
	(select 学号,姓名,成绩 数学成绩 from 学生成绩表 where 科目='数学' ) b
	 on a.学号=b.学号
	 inner join
	(select 学号,姓名,成绩 英语成绩 from 学生成绩表 where 科目='英语') c
	 on b.学号=c.学号
    select a.学号,a.姓名,a.语文成绩,b.数学成绩 from

    (select 学号,姓名,成绩 语文成绩
from 学生成绩表
where 科目='语文') a

    inner join

    (select 学号,姓名,成绩 数学成绩
from 学生成绩表
where 科目='数学') b 
    on a.学号=b.学号 and a.语文成绩>b.数学成绩

6、T-SQL中的关系运算符
    运算符	含义
=	等于
>	大于
>=
	大于或等于

<	小于
<=	小于或等于
<>	不等于
!	非，主要形式有 !=、!>、!<
    T-SQL中的逻辑运算符
运算符	含义
AND	逻辑与
OR	逻辑或
NOT	逻辑非
between-之间 and--在某某和某某之间--where numstore between 20 and 30

in--在某某之间--where bid in（'a0001,a0002'）
in null--查询某列值为空的记录--select * from book where author2 is null
    T-SQL中的通配符--通配符经常和like关键字一起使用

通配符	含义
%	代表0个或多个字符--where name like '杨%'或者'%杨%'
下划线_	匹配任意一个字符--where id like 'a000_'或'[a-c]%'
[ ]	括号中所指定范围内的一个字符--where id '[abc]%'
[^]	不在括号中所指定范围内的一个字符--where '[^dcn]%'
运算符都是这where后面写

    7、限定返回记录的行数

select top n 列名 from 表名 where 条件--限制固定行数--select top 5 * from customer
select top n percent-百分比 列名 from 表名 where 条件--select top 50 percent cid,cname,sex  from customer  where sex='男'

    8、利用select语句复制表

Select   *  into  新表名  from  源表名--创建一个新表, 包含源表所有记录
select bid,bname,pub,author1 into book2 from book where pub='人民出版社'--创建一个新表,包含指定条件和指定列

select * into book3 from book where 1<>1--仅创建表结构，不包含记录


    9、数据完整性约束
主键约束（primary key) --主键约束用于定义表的主键，它是唯一确定表中每一条记录的标识符，其值不能为空，也不能重复，以此保证实体的完整性

alter table student  drop constraint std--删除主键

唯一性约束（unique) --唯一性约束用于指定一个或者多个列的组合值具有唯一性，以防止在列中输入重复的值。定义了唯一性约束的那些列称为唯一键，系统自动为唯一键建立唯一索引，从而保证了唯一键的唯一性。

alter table ttt drop constraint tta --删除唯一性约束

检查约束（check) --检查约束对输入的列或者整个表中的值设置检查条件，以限制输入值，保证数据库数据的完整性
alter table book
 drop constraint chk_author2 --删除检查约束

默认值约束（default）--默认值约束指定在插入操作中如果没有提供输入值时，系统自动指定的值

alter table qq drop constraint qa --删除约束

外键约束（foreign) --外键是用于建立和加强两个表数据之间的联接的一列或多列，即在某一列或多列的组合上定义外键约束，这些列值参考某个表中的主键约束列或唯一性约束列。外键约束用于强制参考完整性。

alter table mm
 drop constraint vvv --删除外键约束
     10、SQL Server的数据类型

     11、建立和删除聚簇索引 --一个表最多可以建立250个非聚集索引或者249个非聚集索引和1个聚集索引，
创建索引会占用磁盘物理空间，
建立索引加快了数据的检索速度，但是减慢了数据修改速度

create-创建 clustered-聚簇 index-索引 mytempindex1 on 表名 (phone)--建立聚簇索引
drop index 表名.mytempindex1--删除聚簇索引
exec sp_helpindex 表名 --查询索引
create index mytempindex2 on mm (phone) --创建非聚簇索引
drop index mm.mytempindex2 --删除非聚簇索引
create unique clustered index mytempindex3 on mm (phone) --唯一索引
create index mytempindex4 on mm (phone,homeaddress) --复合索引


    12、创建/使用视图

create view cus_view
 as
 select cid,cname,address from customer --创建视图
create view book_view
 as select bname,author1,type from book where pub='人民出版社'
select * from book_view --对视图进行查询

drop view cus_view --删除视图
alter view cus_view
 as
 select cid,cname,address from customer where cname='张新' --修改视图

